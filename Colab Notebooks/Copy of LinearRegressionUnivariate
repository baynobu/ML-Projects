{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyO78rLURh5vpO0k6E6zgI+M"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":450},"id":"rufpEiIJNYPB","executionInfo":{"status":"error","timestamp":1676360532037,"user_tz":-420,"elapsed":605,"user":{"displayName":"Listyanti Dewi","userId":"06224398323918158956"}},"outputId":"a0529a5a-c5f6-48ec-9a88-671d457d9fa5"},"outputs":[{"output_type":"error","ename":"FileNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-a3c2a1827e2c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m                 \u001b[0;31m# library utk membaca dataset\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmath\u001b[0m                         \u001b[0;31m# import library utk fungsi matematika seperti akar kuadrat dll\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"train.csv\"\u001b[0m\u001b[0;34m)\u001b[0m     \u001b[0;31m# baca data dari file train.csv, simpan di variabel data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m                  \u001b[0;31m# print header data (baris pertama yg berisi judul setiap kolom)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/util/_decorators.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    309\u001b[0m                     \u001b[0mstacklevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstacklevel\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    310\u001b[0m                 )\n\u001b[0;32m--> 311\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    312\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    313\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options)\u001b[0m\n\u001b[1;32m    584\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    585\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 586\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    587\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    588\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    480\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    481\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 482\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    483\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    484\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    809\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    810\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 811\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    812\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    813\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1038\u001b[0m             )\n\u001b[1;32m   1039\u001b[0m         \u001b[0;31m# error: Too many arguments for \"ParserBase\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1040\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mmapping\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[call-arg]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1041\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1042\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_failover_to_python\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/io/parsers/c_parser_wrapper.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m     49\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     50\u001b[0m         \u001b[0;31m# open handles\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 51\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_open_handles\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     52\u001b[0m         \u001b[0;32massert\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     53\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/io/parsers/base_parser.py\u001b[0m in \u001b[0;36m_open_handles\u001b[0;34m(self, src, kwds)\u001b[0m\n\u001b[1;32m    220\u001b[0m         \u001b[0mLet\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mreaders\u001b[0m \u001b[0mopen\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0mafter\u001b[0m \u001b[0mthey\u001b[0m \u001b[0mare\u001b[0m \u001b[0mdone\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mtheir\u001b[0m \u001b[0mpotential\u001b[0m \u001b[0mraises\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    221\u001b[0m         \"\"\"\n\u001b[0;32m--> 222\u001b[0;31m         self.handles = get_handle(\n\u001b[0m\u001b[1;32m    223\u001b[0m             \u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    224\u001b[0m             \u001b[0;34m\"r\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.8/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    700\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    701\u001b[0m             \u001b[0;31m# Encoding\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 702\u001b[0;31m             handle = open(\n\u001b[0m\u001b[1;32m    703\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    704\u001b[0m                 \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'train.csv'"]}],"source":["import pandas as pd                 # library utk membaca dataset\n","import math                         # import library utk fungsi matematika seperti akar kuadrat dll                 \n","data = pd.read_csv(\"train.csv\")     # baca data dari file train.csv, simpan di variabel data          \n","print(data.head())                  # print header data (baris pertama yg berisi judul setiap kolom)  \n","\n","X = data['x']; Y = data['y']        # salin kolom x ke variabel X, dan kolom y ke variabel Y\n","X = X.tolist()                      # konversi tipe kolom X dan Y menjadi list\n","Y = Y.tolist()                      # konversi menjadi list dilakukan utk mempermudah perhitungan\n","                                    # karena data hasil bacaan pandas berbentuk series, bukan list\n","\n","import matplotlib.pyplot as plt     # import library untuk menggambar grafik\n","plt.scatter(X, Y, s = 5)            # buat scatterplot dari data X di sumbu x, data Y di sumbu y, dan s (tebal titik) = 5\n","plt.grid()                          # atur grafik sehingga menampilkan grid\n","plt.xlabel(\"x values\")              # beri label/legend pada sumbu x sebagai \"x values\"\n","plt.ylabel(\"y values\")              # beri label/legend pada sumbu y sebagai \"y values\"\n","plt.show()                          # tampilkan grafik\n","\n","\n","# algoritma gradient descent untuk mencari parameter w dan b yang paling optimal\n","# w dan b adalah parameter untuk menentukan kemiringan / gradien garis\n","# pada iterasi pertama,  nilai w dan b dibuat 0 (nilai 0 dikirim dari pemanggilan fungsi train)\n","# alpha = learning rate, biasanya antara 0.001 hingga 0.1, untuk mengatur perubahan pencarian w dan b (dibuat naik 0.001 atau naik 0.1 utk setiap iterasinya)\n","# X adalah data pada sumbu x\n","# Y adalah data pada sumbu y\n","def gradient_descent(X, Y, w, b, alpha):\n"," \n","    dl_dw = 0.0                     # variabel sementara untuk menghitung -1 * X * (Y - (w * X + b)) atau bagian dari rumus gradient descent dari seluruh data\n","    dl_db = 0.0                     # variabel sementara untuk menghitung -1 * (Y - (w * X + b)) atau bagian dari rumus gradian descent dari seluruh data\n","    N = len(X)                      # hitung banyak data X, simpan di N\n","\n","    # rumus gradient descent:\n","    # w = w - (1/N) * dl_dw * alpha\n","    # b = b - (1/N) * dl_db * alpha \n","\n","    for i in range(N):              # iterasi sebanyak jumlah data (N)\n","        dl_dw += -1*X[i] * (Y[i] - (w*X[i] + b))  # dl_dw digunakan utk menyimpan hitungan -1 * X * (Y - (w * X + b)) dari setiap data, dan dijumlah total hasilnya\n","        dl_db += -1*(Y[i] - (w*X[i] + b))         # dl_db digunakan utk menyimpan hitungan -1 * (Y - (w * X + b)) dari setiap data, dan dijumlah total hasilnya\n","\n","    w = w - (1/float(N)) * dl_dw * alpha          # menghitung nilai w\n","    b = b - (1/float(N)) * dl_db * alpha          # menghitung nilai b\n","\n","    return w, b\n","\n","# fungsi untuk cost function (kesalahan prediksi)\n","def cost_function (X, Y, w, b):\n","  # X = dataset kolom x (sumbu x)\n","  # Y = dataset kolom y (sumbu y)\n","  # N = banyak data kolom X\n","  # w dan b adalah parameter yg diperoleh dari fungsi gradient descent\n","  # rumus: total_error = 1/2 * N * (Y - (w * X - b)) ** 2\n","\n","\n","    N = len(X)                    # hitung banyak data X\n","    total_error = 0.0             # variabel total error untuk menyimpan hasil perhitungan cost function, diberi nilai awal 0\n","    for i in range(N):            # hitung error untuk setiap data, berulang sebanyak banyak data\n","        total_error += (Y[i] - (w*X[i] - b))**2   # hitung dulu (Y - (w * X - b ))**2\n","        \n","    return total_error / (2*float(N))             # baru hasilnya dikali 1/2, dan dikirim ke fungsi train\n","    \n","\n","# rumus regresi adalah => prediksi = w * x + b\n","# w dan b dicari menggunakan fungsi gradient descent\n","# X dan Y adalah data pada sumbu x dan sumbu y\n","# alpha adalah laju pengaturan perubahan nilai w dan b untuk mencari nilai w dan b yang paling bagus, biasanya alpha adalah antara 0.001 hinga 0.1 \n","# n_iter adalah jumlah iterasi (berapa kali nilai w dan b akan dihitung utk mendapat nilai optimal)\n","# gunakan data training untuk fungsi train ini\n","def train(X, Y, w, b, alpha, n_iter):\n","\n","    for i in range(n_iter):                        # training dilakukan berulang hingga sejumlah n_iter\n","        w, b = gradient_descent(X, Y, w, b, alpha) # hitung w dan b menggunakan fungsi gradient descent sebanyak n_iter kali\n","\n","        if i % 400 == 0:                           # cetak hasilnya setiap kelipatan iterasi 400 (cetak pada iterasi ke 0, ke 400, ke 800, dst hingga 7000)\n","            print (\"iteration:\", i, \"cost: \", cost_function(X, Y, w, b)) # cetak iterasi ke berapa (nilai i menunjukkan hitungan iterasi), cetak cost function utk menampilkan total error\n","    print(f\"w: {w} b: {b}\")\n","    return w, b                                    # return hasil perhitungan w dan b\n","\n","\n","#fungsi untuk melakukan prediksi\n","def predict(x, w, b):                             # prediksi data testing dengan rumus regresi x * w + b, di mana x adalah data testing pada sumbu x\n","    return x*w + b"]},{"cell_type":"code","source":[],"metadata":{"id":"Tp1lRUjXxzWW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Implementasi regresi single variabel\n","\n","#hitung nilai w dan b\n","w, b = train(X, Y, 0.0, 0.0, 0.0001, 7000)\n","\n","#uji coba prediksi dengan memprediksi nilai y jika x adalah 50\n","x_new = 50.0\n","y_new = predict(x_new, w, b)\n","print(\"\\n\\nUji prediksi dengan satu data\\n\\nnilai y jika x = 50\", y_new)                             # tampilkan prediksi y jika x adalah 50\n","\n","#lengkapi dengan melakukan prediksi untuk seluruh data testing!!\n","data_test = pd.read_csv(\"test.csv\")                 # baca data testing dari file test.csv\n","x_test = data_test['x']                             # ambil kolom x saja, salin ke x_test\n","y_test = data_test['y']\n","y_prediction = list()                               # buat list bernama y_prediction untuk menyimpan hasil prediksi nilai y untuk setiap nilai x\n","n = len(x_test)                                     # hitung banyak data utk melakukan iterasi, simpan di n\n","for i in range(n):                                  # iterasi sebanyak n\n","  y_new = predict(x_test[i], w, b)                  # lakukan prediksi untuk setiap nilai x pada x_test, prediksi nilai y, simpan di y_new\n","  y_prediction.append(y_new)                        # simpan setiap nilai prediksi y ke list y_prediction\n","\n","print(\"\\n\\nnilai x, nilai prediksi y\")                  # tampilkan hasilnya\n","for i in range(n):\n","  if i%30 == 0:                                     # jangan print semuanya, print data setiap kelipatan 30 saja sebagai sample\n","    print(x_test[i],\"     \", y_prediction[i])         # print x, dan print hasil prediksi y di sebelahnya\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PuTz9uv9w4LR","executionInfo":{"status":"ok","timestamp":1675856822715,"user_tz":-420,"elapsed":1787,"user":{"displayName":"Listyanti Dewi","userId":"06224398323918158956"}},"outputId":"6dc63d42-8aad-47e6-f0b3-dff634827597"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["iteration: 0 cost:  743.4332672935938\n","iteration: 400 cost:  3.9352561522452434\n","iteration: 800 cost:  3.9352370922739954\n","iteration: 1200 cost:  3.9352228867692007\n","iteration: 1600 cost:  3.9352133946778873\n","iteration: 2000 cost:  3.935208478193514\n","iteration: 2400 cost:  3.935208002687018\n","iteration: 2800 cost:  3.9352118366393762\n","iteration: 3200 cost:  3.9352198515754337\n","iteration: 3600 cost:  3.9352319219992205\n","iteration: 4000 cost:  3.9352479253304566\n","iteration: 4400 cost:  3.9352677418424737\n","iteration: 4800 cost:  3.93529125460133\n","iteration: 5200 cost:  3.9353183494062476\n","iteration: 5600 cost:  3.935348914731232\n","iteration: 6000 cost:  3.9353828416678653\n","iteration: 6400 cost:  3.93542002386934\n","iteration: 6800 cost:  3.9354603574955958\n","\n","\n","Uji prediksi dengan satu data\n","\n","nilai y jika x = 50 49.951286222125134\n","\n","\n","nilai x, nilai prediksi y\n","77       76.92752379748462\n","99       98.90816182185162\n","13       12.98384954478064\n","67       66.93632469549964\n","64       63.93896496490413\n","60       59.94248532411013\n","17       16.98032918557464\n","23       22.97504864676564\n","92       91.91432245046212\n","55       54.946885773117636\n"]}]},{"cell_type":"code","source":["#tampilkan grafik data asli dan data prediksi\n","\n","plt.scatter(x_test, y_test, s = 1)                          # grafik data asli \n","plt.scatter(x_test, y_prediction, c=\"Red\", s = 1, zorder=1) # grafik data prediksi\n","plt.grid()                          \n","plt.xlabel(\"x values\")              \n","plt.ylabel(\"y values\")              \n","plt.show()                          "],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":279},"id":"aAaPIdXzvgZb","executionInfo":{"status":"ok","timestamp":1675856651976,"user_tz":-420,"elapsed":345,"user":{"displayName":"Listyanti Dewi","userId":"06224398323918158956"}},"outputId":"c7d26c0e-f86f-4538-f149-47d2efe28056"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# hitung akurasi\n","# Rumus mean squared error => selisih antara y_test dengan y_prediction dikuadratkan lalu di rata-rata\n","for i in range(len(y_test)):\n","  error = (y_test[i] - abs(y_prediction[i]))**2\n","\n","mse = error / len(y_test)\n","\n","mse = np.mean((y_test - y_prediction)**2)\n","\n","print(\"Mean squared error (MSE): \", mse)\n","print(\"Root mean squared error (RMSE) :\", math.sqrt(mse))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"id":"VijmIobnxTNn","executionInfo":{"status":"error","timestamp":1675993242820,"user_tz":-420,"elapsed":5,"user":{"displayName":"Listyanti Dewi","userId":"06224398323918158956"}},"outputId":"f4b107d2-3950-4ed0-feb8-62b03d62bb38"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-e8232511c6d3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m \u001b[0mmse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0my_prediction\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Mean squared error (MSE): \"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'y_test' is not defined"]}]},{"cell_type":"code","source":["sum = 0\n","\n","for i in range(0, 1000):\n","  sum = sum + i\n","\n","print(sum)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PqKnsnFWx00S","executionInfo":{"status":"ok","timestamp":1676358985874,"user_tz":-420,"elapsed":4,"user":{"displayName":"Listyanti Dewi","userId":"06224398323918158956"}},"outputId":"2b9a66a8-5a83-47fe-e883-d5eb8e7bd1a4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["499500\n"]}]}]}