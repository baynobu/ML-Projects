{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"198kbiGW5Iyaf3RN54BDHZOoIEymGj6sA","timestamp":1675949304572}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":387},"id":"rufpEiIJNYPB","executionInfo":{"status":"ok","timestamp":1675856804536,"user_tz":-420,"elapsed":468,"user":{"displayName":"Listyanti Dewi","userId":"06224398323918158956"}},"outputId":"9a78adf7-50b6-441d-e51b-5538c3776380"},"outputs":[{"output_type":"stream","name":"stdout","text":["    x          y\n","0  24  21.549452\n","1  50  47.464463\n","2  15  17.218656\n","3  38  36.586398\n","4  87  87.288984\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["import pandas as pd                 # library utk membaca dataset\n","import math                         # import library utk fungsi matematika seperti akar kuadrat dll                 \n","data = pd.read_csv(\"train.csv\")     # baca data dari file train.csv, simpan di variabel data          \n","print(data.head())                  # print header data (baris pertama yg berisi judul setiap kolom)  \n","\n","X = data['x']; Y = data['y']        # salin kolom x ke variabel X, dan kolom y ke variabel Y\n","X = X.tolist()                      # konversi tipe kolom X dan Y menjadi list\n","Y = Y.tolist()                      # konversi menjadi list dilakukan utk mempermudah perhitungan\n","                                    # karena data hasil bacaan pandas berbentuk series, bukan list\n","\n","import matplotlib.pyplot as plt     # import library untuk menggambar grafik\n","plt.scatter(X, Y, s = 5)            # buat scatterplot dari data X di sumbu x, data Y di sumbu y, dan s (tebal titik) = 5\n","plt.grid()                          # atur grafik sehingga menampilkan grid\n","plt.xlabel(\"x values\")              # beri label/legend pada sumbu x sebagai \"x values\"\n","plt.ylabel(\"y values\")              # beri label/legend pada sumbu y sebagai \"y values\"\n","plt.show()                          # tampilkan grafik\n","\n","\n","# algoritma gradient descent untuk mencari parameter w dan b yang paling optimal\n","# w dan b adalah parameter untuk menentukan kemiringan / gradien garis\n","# pada iterasi pertama,  nilai w dan b dibuat 0 (nilai 0 dikirim dari pemanggilan fungsi train)\n","# alpha = learning rate, biasanya antara 0.001 hingga 0.1, untuk mengatur perubahan pencarian w dan b (dibuat naik 0.001 atau naik 0.1 utk setiap iterasinya)\n","# X adalah data pada sumbu x\n","# Y adalah data pada sumbu y\n","def gradient_descent(X, Y, w, b, alpha):\n"," \n","    dl_dw = 0.0                     # variabel sementara untuk menghitung -1 * X * (Y - (w * X + b)) atau bagian dari rumus gradient descent dari seluruh data\n","    dl_db = 0.0                     # variabel sementara untuk menghitung -1 * (Y - (w * X + b)) atau bagian dari rumus gradian descent dari seluruh data\n","    N = len(X)                      # hitung banyak data X, simpan di N\n","\n","    # rumus gradient descent:\n","    # w = w - (1/N) * dl_dw * alpha\n","    # b = b - (1/N) * dl_db * alpha \n","\n","    for i in range(N):              # iterasi sebanyak jumlah data (N)\n","        dl_dw += -1*X[i] * (Y[i] - (w*X[i] + b))  # dl_dw digunakan utk menyimpan hitungan -1 * X * (Y - (w * X + b)) dari setiap data, dan dijumlah total hasilnya\n","        dl_db += -1*(Y[i] - (w*X[i] + b))         # dl_db digunakan utk menyimpan hitungan -1 * (Y - (w * X + b)) dari setiap data, dan dijumlah total hasilnya\n","\n","    w = w - (1/float(N)) * dl_dw * alpha          # menghitung nilai w\n","    b = b - (1/float(N)) * dl_db * alpha          # menghitung nilai b\n","\n","    return w, b\n","\n","# fungsi untuk cost function (kesalahan prediksi)\n","def cost_function (X, Y, w, b):\n","  # X = dataset kolom x (sumbu x)\n","  # Y = dataset kolom y (sumbu y)\n","  # N = banyak data kolom X\n","  # w dan b adalah parameter yg diperoleh dari fungsi gradient descent\n","  # rumus: total_error = 1/2 * N * (Y - (w * X - b)) ** 2\n","\n","\n","    N = len(X)                    # hitung banyak data X\n","    total_error = 0.0             # variabel total error untuk menyimpan hasil perhitungan cost function, diberi nilai awal 0\n","    for i in range(N):            # hitung error untuk setiap data, berulang sebanyak banyak data\n","        total_error += (Y[i] - (w*X[i] - b))**2   # hitung dulu (Y - (w * X - b ))**2\n","        \n","    return total_error / (2*float(N))             # baru hasilnya dikali 1/2, dan dikirim ke fungsi train\n","    \n","\n","# rumus regresi adalah => prediksi = w * x + b\n","# w dan b dicari menggunakan fungsi gradient descent\n","# X dan Y adalah data pada sumbu x dan sumbu y\n","# alpha adalah laju pengaturan perubahan nilai w dan b untuk mencari nilai w dan b yang paling bagus, biasanya alpha adalah antara 0.001 hinga 0.1 \n","# n_iter adalah jumlah iterasi (berapa kali nilai w dan b akan dihitung utk mendapat nilai optimal)\n","# gunakan data training untuk fungsi train ini\n","def train(X, Y, w, b, alpha, n_iter):\n","\n","    for i in range(n_iter):                        # training dilakukan berulang hingga sejumlah n_iter\n","        w, b = gradient_descent(X, Y, w, b, alpha) # hitung w dan b menggunakan fungsi gradient descent sebanyak n_iter kali\n","\n","        if i % 400 == 0:                           # cetak hasilnya setiap kelipatan iterasi 400 (cetak pada iterasi ke 0, ke 400, ke 800, dst hingga 7000)\n","            print (\"iteration:\", i, \"cost: \", cost_function(X, Y, w, b)) # cetak iterasi ke berapa (nilai i menunjukkan hitungan iterasi), cetak cost function utk menampilkan total error\n","    return w, b                                    # return hasil perhitungan w dan b\n","\n","\n","#fungsi untuk melakukan prediksi\n","def predict(x, w, b):                             # prediksi data testing dengan rumus regresi x * w + b, di mana x adalah data testing pada sumbu x\n","    return x*w + b"]},{"cell_type":"code","source":["#Implementasi regresi single variabel\n","\n","#hitung nilai w dan b\n","w, b = train(X, Y, 0.0, 0.0, 0.0001, 7000)\n","\n","#uji coba prediksi dengan memprediksi nilai y jika x adalah 50\n","x_new = 50.0\n","y_new = predict(x_new, w, b)\n","print(\"\\n\\nUji prediksi dengan satu data\\n\\nnilai y jika x = 50\", y_new)                             # tampilkan prediksi y jika x adalah 50\n","\n","#lengkapi dengan melakukan prediksi untuk seluruh data testing!!\n","data_test = pd.read_csv(\"test.csv\")                 # baca data testing dari file test.csv\n","x_test = data_test['x']                             # ambil kolom x saja, salin ke x_test\n","y_test = data_test['y']\n","y_prediction = list()                               # buat list bernama y_prediction untuk menyimpan hasil prediksi nilai y untuk setiap nilai x\n","n = len(x_test)                                     # hitung banyak data utk melakukan iterasi, simpan di n\n","for i in range(n):                                  # iterasi sebanyak n\n","  y_new = predict(x_test[i], w, b)                  # lakukan prediksi untuk setiap nilai x pada x_test, prediksi nilai y, simpan di y_new\n","  y_prediction.append(y_new)                        # simpan setiap nilai prediksi y ke list y_prediction\n","\n","print(\"\\n\\nnilai x, nilai prediksi y\")                  # tampilkan hasilnya\n","for i in range(n):\n","  if i%30 == 0:                                     # jangan print semuanya, print data setiap kelipatan 30 saja sebagai sample\n","    print(x_test[i],\"     \", y_prediction[i])         # print x, dan print hasil prediksi y di sebelahnya\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PuTz9uv9w4LR","executionInfo":{"status":"ok","timestamp":1675856822715,"user_tz":-420,"elapsed":1787,"user":{"displayName":"Listyanti Dewi","userId":"06224398323918158956"}},"outputId":"6dc63d42-8aad-47e6-f0b3-dff634827597"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["iteration: 0 cost:  743.4332672935938\n","iteration: 400 cost:  3.9352561522452434\n","iteration: 800 cost:  3.9352370922739954\n","iteration: 1200 cost:  3.9352228867692007\n","iteration: 1600 cost:  3.9352133946778873\n","iteration: 2000 cost:  3.935208478193514\n","iteration: 2400 cost:  3.935208002687018\n","iteration: 2800 cost:  3.9352118366393762\n","iteration: 3200 cost:  3.9352198515754337\n","iteration: 3600 cost:  3.9352319219992205\n","iteration: 4000 cost:  3.9352479253304566\n","iteration: 4400 cost:  3.9352677418424737\n","iteration: 4800 cost:  3.93529125460133\n","iteration: 5200 cost:  3.9353183494062476\n","iteration: 5600 cost:  3.935348914731232\n","iteration: 6000 cost:  3.9353828416678653\n","iteration: 6400 cost:  3.93542002386934\n","iteration: 6800 cost:  3.9354603574955958\n","\n","\n","Uji prediksi dengan satu data\n","\n","nilai y jika x = 50 49.951286222125134\n","\n","\n","nilai x, nilai prediksi y\n","77       76.92752379748462\n","99       98.90816182185162\n","13       12.98384954478064\n","67       66.93632469549964\n","64       63.93896496490413\n","60       59.94248532411013\n","17       16.98032918557464\n","23       22.97504864676564\n","92       91.91432245046212\n","55       54.946885773117636\n"]}]},{"cell_type":"code","source":["#tampilkan grafik data asli dan data prediksi\n","\n","plt.scatter(x_test, y_test, s = 1)                          # grafik data asli \n","plt.scatter(x_test, y_prediction, c=\"Red\", s = 1, zorder=1) # grafik data prediksi\n","plt.grid()                          \n","plt.xlabel(\"x values\")              \n","plt.ylabel(\"y values\")              \n","plt.show()                          "],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":279},"id":"aAaPIdXzvgZb","executionInfo":{"status":"ok","timestamp":1675856651976,"user_tz":-420,"elapsed":345,"user":{"displayName":"Listyanti Dewi","userId":"06224398323918158956"}},"outputId":"c7d26c0e-f86f-4538-f149-47d2efe28056"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["# hitung akurasi\n","# Rumus mean squared error => selisih antara y_test dengan y_prediction dikuadratkan lalu di rata-rata\n","for i in range(len(y_test)):\n","  error = (y_test[i] - abs(y_prediction[i]))**2\n","\n","mse = error / len(y_test)\n","\n","print(\"Mean squared error (MSE): \", mse)\n","print(\"Root mean squared error (RMSE) :\", math.sqrt(mse))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VijmIobnxTNn","executionInfo":{"status":"ok","timestamp":1675856654764,"user_tz":-420,"elapsed":334,"user":{"displayName":"Listyanti Dewi","userId":"06224398323918158956"}},"outputId":"f4eff2cd-8d9e-4777-e5df-1ee35755c92d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean squared error (MSE):  0.10103658323026139\n","Root mean squared error (RMSE) : 0.3178625225317722\n"]}]}]}