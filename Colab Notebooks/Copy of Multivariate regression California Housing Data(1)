{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1BUXbRO-d4tl1LP77RWXn9y3vdsKSXtuN","timestamp":1676277428497}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ahf0KdoulSbs","executionInfo":{"status":"ok","timestamp":1686856098455,"user_tz":-420,"elapsed":482,"user":{"displayName":"A Hanif","userId":"10493356779510965989"}},"outputId":"c07073f7-67ac-4c17-a0f8-5ac7ff084956"},"outputs":[{"output_type":"stream","name":"stdout","text":["         x1      x2      x3      x4         y\n","0      15.0  5612.0  1283.0  1.4936   66900.0\n","1      19.0  7650.0  1901.0  1.8200   80100.0\n","2      17.0   720.0   174.0  1.6509   85700.0\n","3      14.0  1501.0   337.0  3.1917   73400.0\n","4      20.0  1454.0   326.0  1.9250   65500.0\n","...     ...     ...     ...     ...       ...\n","16995  52.0  2217.0   394.0  2.3571  111400.0\n","16996  36.0  2349.0   528.0  2.5179   79000.0\n","16997  17.0  2677.0   531.0  3.0313  103600.0\n","16998  19.0  2672.0   552.0  1.9797   85800.0\n","16999  52.0  1820.0   300.0  3.0147   94600.0\n","\n","[17000 rows x 5 columns]\n"]}],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","\n","# get data from dataset\n","data = pd.read_csv('/content/sample_data/california_housing_train.csv')\n","\n","# konversi menjadi dataframe, dengan nama kolom x1, x2, x3, dan x4, serta y\n","df = pd.DataFrame({'x1': data['housing_median_age'], 'x2': data['total_rooms'], 'x3': data['total_bedrooms'], 'x4': data['median_income'], 'y':data['median_house_value']})\n","\n","# print data\n","print(df)\n","\n","\n"]},{"cell_type":"code","source":["# split data menjadi 80% data training, dan sisanya testing. 80% = 0.8 kali banyak data hasilnya dibulatkan ke integer\n","training_df = df.iloc[:(int((len(df)*0.8))), :]\n","testing_df = df.iloc[(int((len(df)*0.8))):, :]\n","\n","# Calculate coefficients using gradient descent\n","\n","# siapkan data training dengan 4 variabel x1, x2, x3, x4 dan 1 target (y)\n","X_train = training_df[['x1','x2','x3','x4']]\n","y_train = training_df['y']\n","\n","# tambahkan satu kolom bernilai 1 pada data X_training supaya baris dan kolom antara X dan y sama, sehingga bisa dikalikan\n","X_train = np.c_[np.ones(len(X_train)), X_train]\n","\n","# beri nilai awal theta yaitu 0\n","theta = np.zeros(X_train.shape[1])\n","print(theta)\n","\n","# tentukan alpha (learning rate), karena datanya banyak, alphanya kecil\n","alpha = 0.0000001\n","\n","# tentukan banyak data training, disimpan di m, banyak iterasi (num_iters)\n","m = len(y_train)\n","print(m)\n","num_iters = 100000\n","\n","# buat array untuk menyimpan perubahan nilai cost overtime\n","J_history = []"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vJZBuDNUmbQB","executionInfo":{"status":"ok","timestamp":1686856100951,"user_tz":-420,"elapsed":5,"user":{"displayName":"A Hanif","userId":"10493356779510965989"}},"outputId":"94be4a64-292c-4217-ea92-6bab68c51a9c"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["[0. 0. 0. 0. 0.]\n","13600\n"]}]},{"cell_type":"code","source":["\n","# hitung theta sebanyak num_iters kali\n","for i in range(num_iters):\n","\n","    # menacari data prediksi dengan rumus regresi\n","    y_pred = X_train @ theta\n","\n","    # mencari error dari selisih data prediksi dengan data asli\n","    error = y_pred - y_train\n","\n","    # rumus cost function\n","    cost = 1/(2*m) * np.sum(error**2)\n","    J_history.append(cost)\n","\n","    # rumus gradient descent utk multivariate menggunakan numpy\n","    gradient = 1/m * X_train.T @ error\n","\n","    # update theta terbaru\n","    theta = theta - alpha * gradient\n","\n","# Use the coefficients to make predictions on the test set\n","# rumus regresi multivariate adalah perkalian matriks X_test dengan matriks berisi theta/koefisien regresi\n","X_test = testing_df[['x1', 'x2', 'x3', 'x4']]\n","\n","# supaya matriks bisa dikalikan, jumlah kolom X dengan jumlah baris Y harus sama. Sehingga ditambah 1 kolom bernilai angka 1 di matriks y.\n","X_test = np.c_[np.ones(len(X_test)), X_test]\n","y_pred = X_test @ theta\n","y_test = testing_df['y']\n","\n","# Calculate mean squared error as a metric\n","mse = np.mean((y_test - y_pred)**2)\n","print(\"Mean Squared Error: \", mse)\n","\n","# Plot the cost function over the number of iterations\n","plt.plot(J_history)\n","plt.xlabel(\"Iteration\")\n","plt.ylabel(\"Cost\")\n","plt.show()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":482},"id":"xAgOkcXsooQG","executionInfo":{"status":"ok","timestamp":1686856202872,"user_tz":-420,"elapsed":98237,"user":{"displayName":"A Hanif","userId":"10493356779510965989"}},"outputId":"fa8522e8-f40e-4fd1-c3df-127d6b7e371e"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Mean Squared Error:  15636127048.923723\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# Creating figure\n","fig = plt.figure(figsize = (10, 7))\n","ax = plt.axes(projection =\"3d\")\n","\n","# Creating plot\n","ax.scatter3D(testing_df['x1'], testing_df['x2'], y_pred, color = \"red\", s = 1)\n","ax.scatter3D(testing_df['x1'], testing_df['x2'], y_test, color = \"green\", s = 1)\n","\n","plt.title(\"Actual y (green), predicted y (yellow)\")\n","\n","# show plot\n","plt.show()\n","\n","# berbagai plot relasi antara x1, x2, x3, x4 dengan y\n","\n","plt.scatter(testing_df['x1'], y_test, color=\"blue\", s = 1)\n","plt.scatter(testing_df['x1'], y_pred, color=\"yellow\", s = 1)\n","plt.title(\"X1 terhadap y\")\n","plt.show()\n","\n","\n","plt.scatter(testing_df['x2'], y_test, color=\"blue\", s = 1)\n","plt.scatter(testing_df['x2'], y_pred, color=\"yellow\", s = 1)\n","plt.title(\"X2 terhadap y\")\n","plt.show()\n","\n","plt.scatter(testing_df['x3'], y_test, color=\"blue\", s = 1)\n","plt.scatter(testing_df['x3'], y_pred, color=\"yellow\", s = 1)\n","plt.title(\"X3 terhadap y\")\n","plt.show()\n","\n","plt.scatter(testing_df['x4'], y_test, color=\"blue\", s = 1)\n","plt.scatter(testing_df['x4'], y_pred, color=\"yellow\", s = 1)\n","plt.title(\"X4 terhadap y\")\n","plt.show()"],"metadata":{"id":"jPzeL8cK6_W8"},"execution_count":null,"outputs":[]}]}